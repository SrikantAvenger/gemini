// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package gopkg.in.bblfsh.sdk.v1.uast

/** Position represents a position in a source code file.
  */
@SerialVersionUID(0L)
final case class Position(
    offset: _root_.scala.Int = 0,
    line: _root_.scala.Int = 0,
    col: _root_.scala.Int = 0
    ) extends scalapb.GeneratedMessage with scalapb.Message[Position] with scalapb.lenses.Updatable[Position] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (offset != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(1, offset) }
      if (line != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, line) }
      if (col != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(3, col) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = offset
        if (__v != 0) {
          _output__.writeUInt32(1, __v)
        }
      };
      {
        val __v = line
        if (__v != 0) {
          _output__.writeUInt32(2, __v)
        }
      };
      {
        val __v = col
        if (__v != 0) {
          _output__.writeUInt32(3, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): gopkg.in.bblfsh.sdk.v1.uast.Position = {
      var __offset = this.offset
      var __line = this.line
      var __col = this.col
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __offset = _input__.readUInt32()
          case 16 =>
            __line = _input__.readUInt32()
          case 24 =>
            __col = _input__.readUInt32()
          case tag => _input__.skipField(tag)
        }
      }
      gopkg.in.bblfsh.sdk.v1.uast.Position(
          offset = __offset,
          line = __line,
          col = __col
      )
    }
    def withOffset(__v: _root_.scala.Int): Position = copy(offset = __v)
    def withLine(__v: _root_.scala.Int): Position = copy(line = __v)
    def withCol(__v: _root_.scala.Int): Position = copy(col = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = offset
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = line
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = col
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(offset)
        case 2 => _root_.scalapb.descriptors.PInt(line)
        case 3 => _root_.scalapb.descriptors.PInt(col)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = gopkg.in.bblfsh.sdk.v1.uast.Position
}

object Position extends scalapb.GeneratedMessageCompanion[gopkg.in.bblfsh.sdk.v1.uast.Position] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[gopkg.in.bblfsh.sdk.v1.uast.Position] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): gopkg.in.bblfsh.sdk.v1.uast.Position = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    gopkg.in.bblfsh.sdk.v1.uast.Position(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[_root_.scala.Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[gopkg.in.bblfsh.sdk.v1.uast.Position] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      gopkg.in.bblfsh.sdk.v1.uast.Position(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = GeneratedProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = GeneratedProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = gopkg.in.bblfsh.sdk.v1.uast.Position(
  )
  implicit class PositionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, gopkg.in.bblfsh.sdk.v1.uast.Position]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, gopkg.in.bblfsh.sdk.v1.uast.Position](_l) {
    def offset: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.offset)((c_, f_) => c_.copy(offset = f_))
    def line: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.line)((c_, f_) => c_.copy(line = f_))
    def col: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.col)((c_, f_) => c_.copy(col = f_))
  }
  final val OFFSET_FIELD_NUMBER = 1
  final val LINE_FIELD_NUMBER = 2
  final val COL_FIELD_NUMBER = 3
}
