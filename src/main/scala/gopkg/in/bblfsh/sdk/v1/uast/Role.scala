// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package gopkg.in.bblfsh.sdk.v1.uast

sealed trait Role extends _root_.scalapb.GeneratedEnum {
  type EnumType = Role
  def isInvalid: _root_.scala.Boolean = false
  def isIdentifier: _root_.scala.Boolean = false
  def isQualified: _root_.scala.Boolean = false
  def isOperator: _root_.scala.Boolean = false
  def isBinary: _root_.scala.Boolean = false
  def isUnary: _root_.scala.Boolean = false
  def isLeft: _root_.scala.Boolean = false
  def isRight: _root_.scala.Boolean = false
  def isInfix: _root_.scala.Boolean = false
  def isPostfix: _root_.scala.Boolean = false
  def isBitwise: _root_.scala.Boolean = false
  def isBoolean: _root_.scala.Boolean = false
  def isUnsigned: _root_.scala.Boolean = false
  def isLeftShift: _root_.scala.Boolean = false
  def isRightShift: _root_.scala.Boolean = false
  def isOr: _root_.scala.Boolean = false
  def isXor: _root_.scala.Boolean = false
  def isAnd: _root_.scala.Boolean = false
  def isExpression: _root_.scala.Boolean = false
  def isStatement: _root_.scala.Boolean = false
  def isEqual: _root_.scala.Boolean = false
  def isNot: _root_.scala.Boolean = false
  def isLessThan: _root_.scala.Boolean = false
  def isLessThanOrEqual: _root_.scala.Boolean = false
  def isGreaterThan: _root_.scala.Boolean = false
  def isGreaterThanOrEqual: _root_.scala.Boolean = false
  def isIdentical: _root_.scala.Boolean = false
  def isContains: _root_.scala.Boolean = false
  def isIncrement: _root_.scala.Boolean = false
  def isDecrement: _root_.scala.Boolean = false
  def isNegative: _root_.scala.Boolean = false
  def isPositive: _root_.scala.Boolean = false
  def isDereference: _root_.scala.Boolean = false
  def isTakeAddress: _root_.scala.Boolean = false
  def isFile: _root_.scala.Boolean = false
  def isAdd: _root_.scala.Boolean = false
  def isSubstract: _root_.scala.Boolean = false
  def isMultiply: _root_.scala.Boolean = false
  def isDivide: _root_.scala.Boolean = false
  def isModulo: _root_.scala.Boolean = false
  def isPackage: _root_.scala.Boolean = false
  def isDeclaration: _root_.scala.Boolean = false
  def isImport: _root_.scala.Boolean = false
  def isPathname: _root_.scala.Boolean = false
  def isAlias: _root_.scala.Boolean = false
  def isFunction: _root_.scala.Boolean = false
  def isBody: _root_.scala.Boolean = false
  def isName: _root_.scala.Boolean = false
  def isReceiver: _root_.scala.Boolean = false
  def isArgument: _root_.scala.Boolean = false
  def isValue: _root_.scala.Boolean = false
  def isArgsList: _root_.scala.Boolean = false
  def isBase: _root_.scala.Boolean = false
  def isImplements: _root_.scala.Boolean = false
  def isInstance: _root_.scala.Boolean = false
  def isSubtype: _root_.scala.Boolean = false
  def isSubpackage: _root_.scala.Boolean = false
  def isModule: _root_.scala.Boolean = false
  def isFriend: _root_.scala.Boolean = false
  def isWorld: _root_.scala.Boolean = false
  def isIf: _root_.scala.Boolean = false
  def isCondition: _root_.scala.Boolean = false
  def isThen: _root_.scala.Boolean = false
  def isElse: _root_.scala.Boolean = false
  def isSwitch: _root_.scala.Boolean = false
  def isCase: _root_.scala.Boolean = false
  def isDefault: _root_.scala.Boolean = false
  def isFor: _root_.scala.Boolean = false
  def isInitialization: _root_.scala.Boolean = false
  def isUpdate: _root_.scala.Boolean = false
  def isIterator: _root_.scala.Boolean = false
  def isWhile: _root_.scala.Boolean = false
  def isDoWhile: _root_.scala.Boolean = false
  def isBreak: _root_.scala.Boolean = false
  def isContinue: _root_.scala.Boolean = false
  def isGoto: _root_.scala.Boolean = false
  def isBlock: _root_.scala.Boolean = false
  def isScope: _root_.scala.Boolean = false
  def isReturn: _root_.scala.Boolean = false
  def isTry: _root_.scala.Boolean = false
  def isCatch: _root_.scala.Boolean = false
  def isFinally: _root_.scala.Boolean = false
  def isThrow: _root_.scala.Boolean = false
  def isAssert: _root_.scala.Boolean = false
  def isCall: _root_.scala.Boolean = false
  def isCallee: _root_.scala.Boolean = false
  def isPositional: _root_.scala.Boolean = false
  def isNoop: _root_.scala.Boolean = false
  def isLiteral: _root_.scala.Boolean = false
  def isByte: _root_.scala.Boolean = false
  def isByteString: _root_.scala.Boolean = false
  def isCharacter: _root_.scala.Boolean = false
  def isList: _root_.scala.Boolean = false
  def isMap: _root_.scala.Boolean = false
  def isNull: _root_.scala.Boolean = false
  def isNumber: _root_.scala.Boolean = false
  def isRegexp: _root_.scala.Boolean = false
  def isSet: _root_.scala.Boolean = false
  def isString: _root_.scala.Boolean = false
  def isTuple: _root_.scala.Boolean = false
  def isType: _root_.scala.Boolean = false
  def isEntry: _root_.scala.Boolean = false
  def isKey: _root_.scala.Boolean = false
  def isPrimitive: _root_.scala.Boolean = false
  def isAssignment: _root_.scala.Boolean = false
  def isThis: _root_.scala.Boolean = false
  def isComment: _root_.scala.Boolean = false
  def isDocumentation: _root_.scala.Boolean = false
  def isWhitespace: _root_.scala.Boolean = false
  def isIncomplete: _root_.scala.Boolean = false
  def isUnannotated: _root_.scala.Boolean = false
  def isVisibility: _root_.scala.Boolean = false
  def isAnnotation: _root_.scala.Boolean = false
  def isAnonymous: _root_.scala.Boolean = false
  def isEnumeration: _root_.scala.Boolean = false
  def isArithmetic: _root_.scala.Boolean = false
  def isRelational: _root_.scala.Boolean = false
  def isVariable: _root_.scala.Boolean = false
  def companion: _root_.scalapb.GeneratedEnumCompanion[Role] = gopkg.in.bblfsh.sdk.v1.uast.Role
}

object Role extends _root_.scalapb.GeneratedEnumCompanion[Role] {
  implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Role] = this
  @SerialVersionUID(0L)
  case object INVALID extends Role {
    val value = 0
    val index = 0
    val name = "INVALID"
    override def isInvalid: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object IDENTIFIER extends Role {
    val value = 1
    val index = 1
    val name = "IDENTIFIER"
    override def isIdentifier: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object QUALIFIED extends Role {
    val value = 2
    val index = 2
    val name = "QUALIFIED"
    override def isQualified: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object OPERATOR extends Role {
    val value = 3
    val index = 3
    val name = "OPERATOR"
    override def isOperator: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object BINARY extends Role {
    val value = 4
    val index = 4
    val name = "BINARY"
    override def isBinary: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object UNARY extends Role {
    val value = 5
    val index = 5
    val name = "UNARY"
    override def isUnary: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object LEFT extends Role {
    val value = 6
    val index = 6
    val name = "LEFT"
    override def isLeft: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object RIGHT extends Role {
    val value = 7
    val index = 7
    val name = "RIGHT"
    override def isRight: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object INFIX extends Role {
    val value = 8
    val index = 8
    val name = "INFIX"
    override def isInfix: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object POSTFIX extends Role {
    val value = 9
    val index = 9
    val name = "POSTFIX"
    override def isPostfix: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object BITWISE extends Role {
    val value = 10
    val index = 10
    val name = "BITWISE"
    override def isBitwise: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object BOOLEAN extends Role {
    val value = 11
    val index = 11
    val name = "BOOLEAN"
    override def isBoolean: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object UNSIGNED extends Role {
    val value = 12
    val index = 12
    val name = "UNSIGNED"
    override def isUnsigned: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object LEFT_SHIFT extends Role {
    val value = 13
    val index = 13
    val name = "LEFT_SHIFT"
    override def isLeftShift: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object RIGHT_SHIFT extends Role {
    val value = 14
    val index = 14
    val name = "RIGHT_SHIFT"
    override def isRightShift: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object OR extends Role {
    val value = 15
    val index = 15
    val name = "OR"
    override def isOr: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object XOR extends Role {
    val value = 16
    val index = 16
    val name = "XOR"
    override def isXor: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object AND extends Role {
    val value = 17
    val index = 17
    val name = "AND"
    override def isAnd: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object EXPRESSION extends Role {
    val value = 18
    val index = 18
    val name = "EXPRESSION"
    override def isExpression: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object STATEMENT extends Role {
    val value = 19
    val index = 19
    val name = "STATEMENT"
    override def isStatement: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object EQUAL extends Role {
    val value = 20
    val index = 20
    val name = "EQUAL"
    override def isEqual: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object NOT extends Role {
    val value = 21
    val index = 21
    val name = "NOT"
    override def isNot: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object LESS_THAN extends Role {
    val value = 22
    val index = 22
    val name = "LESS_THAN"
    override def isLessThan: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object LESS_THAN_OR_EQUAL extends Role {
    val value = 23
    val index = 23
    val name = "LESS_THAN_OR_EQUAL"
    override def isLessThanOrEqual: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object GREATER_THAN extends Role {
    val value = 24
    val index = 24
    val name = "GREATER_THAN"
    override def isGreaterThan: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object GREATER_THAN_OR_EQUAL extends Role {
    val value = 25
    val index = 25
    val name = "GREATER_THAN_OR_EQUAL"
    override def isGreaterThanOrEqual: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object IDENTICAL extends Role {
    val value = 26
    val index = 26
    val name = "IDENTICAL"
    override def isIdentical: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object CONTAINS extends Role {
    val value = 27
    val index = 27
    val name = "CONTAINS"
    override def isContains: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object INCREMENT extends Role {
    val value = 28
    val index = 28
    val name = "INCREMENT"
    override def isIncrement: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DECREMENT extends Role {
    val value = 29
    val index = 29
    val name = "DECREMENT"
    override def isDecrement: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object NEGATIVE extends Role {
    val value = 30
    val index = 30
    val name = "NEGATIVE"
    override def isNegative: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object POSITIVE extends Role {
    val value = 31
    val index = 31
    val name = "POSITIVE"
    override def isPositive: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DEREFERENCE extends Role {
    val value = 32
    val index = 32
    val name = "DEREFERENCE"
    override def isDereference: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object TAKE_ADDRESS extends Role {
    val value = 33
    val index = 33
    val name = "TAKE_ADDRESS"
    override def isTakeAddress: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object FILE extends Role {
    val value = 34
    val index = 34
    val name = "FILE"
    override def isFile: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object ADD extends Role {
    val value = 35
    val index = 35
    val name = "ADD"
    override def isAdd: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object SUBSTRACT extends Role {
    val value = 36
    val index = 36
    val name = "SUBSTRACT"
    override def isSubstract: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object MULTIPLY extends Role {
    val value = 37
    val index = 37
    val name = "MULTIPLY"
    override def isMultiply: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DIVIDE extends Role {
    val value = 38
    val index = 38
    val name = "DIVIDE"
    override def isDivide: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object MODULO extends Role {
    val value = 39
    val index = 39
    val name = "MODULO"
    override def isModulo: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PACKAGE extends Role {
    val value = 40
    val index = 40
    val name = "PACKAGE"
    override def isPackage: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DECLARATION extends Role {
    val value = 41
    val index = 41
    val name = "DECLARATION"
    override def isDeclaration: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object IMPORT extends Role {
    val value = 42
    val index = 42
    val name = "IMPORT"
    override def isImport: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PATHNAME extends Role {
    val value = 43
    val index = 43
    val name = "PATHNAME"
    override def isPathname: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object ALIAS extends Role {
    val value = 44
    val index = 44
    val name = "ALIAS"
    override def isAlias: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object FUNCTION extends Role {
    val value = 45
    val index = 45
    val name = "FUNCTION"
    override def isFunction: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object BODY extends Role {
    val value = 46
    val index = 46
    val name = "BODY"
    override def isBody: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object NAME extends Role {
    val value = 47
    val index = 47
    val name = "NAME"
    override def isName: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object RECEIVER extends Role {
    val value = 48
    val index = 48
    val name = "RECEIVER"
    override def isReceiver: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object ARGUMENT extends Role {
    val value = 49
    val index = 49
    val name = "ARGUMENT"
    override def isArgument: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object VALUE extends Role {
    val value = 50
    val index = 50
    val name = "VALUE"
    override def isValue: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object ARGS_LIST extends Role {
    val value = 51
    val index = 51
    val name = "ARGS_LIST"
    override def isArgsList: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object BASE extends Role {
    val value = 52
    val index = 52
    val name = "BASE"
    override def isBase: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object IMPLEMENTS extends Role {
    val value = 53
    val index = 53
    val name = "IMPLEMENTS"
    override def isImplements: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object INSTANCE extends Role {
    val value = 54
    val index = 54
    val name = "INSTANCE"
    override def isInstance: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object SUBTYPE extends Role {
    val value = 55
    val index = 55
    val name = "SUBTYPE"
    override def isSubtype: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object SUBPACKAGE extends Role {
    val value = 56
    val index = 56
    val name = "SUBPACKAGE"
    override def isSubpackage: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object MODULE extends Role {
    val value = 57
    val index = 57
    val name = "MODULE"
    override def isModule: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object FRIEND extends Role {
    val value = 58
    val index = 58
    val name = "FRIEND"
    override def isFriend: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object WORLD extends Role {
    val value = 59
    val index = 59
    val name = "WORLD"
    override def isWorld: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object IF extends Role {
    val value = 60
    val index = 60
    val name = "IF"
    override def isIf: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object CONDITION extends Role {
    val value = 61
    val index = 61
    val name = "CONDITION"
    override def isCondition: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object THEN extends Role {
    val value = 62
    val index = 62
    val name = "THEN"
    override def isThen: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object ELSE extends Role {
    val value = 63
    val index = 63
    val name = "ELSE"
    override def isElse: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object SWITCH extends Role {
    val value = 64
    val index = 64
    val name = "SWITCH"
    override def isSwitch: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object CASE extends Role {
    val value = 65
    val index = 65
    val name = "CASE"
    override def isCase: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DEFAULT extends Role {
    val value = 66
    val index = 66
    val name = "DEFAULT"
    override def isDefault: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object FOR extends Role {
    val value = 67
    val index = 67
    val name = "FOR"
    override def isFor: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object INITIALIZATION extends Role {
    val value = 68
    val index = 68
    val name = "INITIALIZATION"
    override def isInitialization: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object UPDATE extends Role {
    val value = 69
    val index = 69
    val name = "UPDATE"
    override def isUpdate: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object ITERATOR extends Role {
    val value = 70
    val index = 70
    val name = "ITERATOR"
    override def isIterator: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object WHILE extends Role {
    val value = 71
    val index = 71
    val name = "WHILE"
    override def isWhile: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DO_WHILE extends Role {
    val value = 72
    val index = 72
    val name = "DO_WHILE"
    override def isDoWhile: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object BREAK extends Role {
    val value = 73
    val index = 73
    val name = "BREAK"
    override def isBreak: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object CONTINUE extends Role {
    val value = 74
    val index = 74
    val name = "CONTINUE"
    override def isContinue: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object GOTO extends Role {
    val value = 75
    val index = 75
    val name = "GOTO"
    override def isGoto: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object BLOCK extends Role {
    val value = 76
    val index = 76
    val name = "BLOCK"
    override def isBlock: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object SCOPE extends Role {
    val value = 77
    val index = 77
    val name = "SCOPE"
    override def isScope: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object RETURN extends Role {
    val value = 78
    val index = 78
    val name = "RETURN"
    override def isReturn: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object TRY extends Role {
    val value = 79
    val index = 79
    val name = "TRY"
    override def isTry: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object CATCH extends Role {
    val value = 80
    val index = 80
    val name = "CATCH"
    override def isCatch: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object FINALLY extends Role {
    val value = 81
    val index = 81
    val name = "FINALLY"
    override def isFinally: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object THROW extends Role {
    val value = 82
    val index = 82
    val name = "THROW"
    override def isThrow: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object ASSERT extends Role {
    val value = 83
    val index = 83
    val name = "ASSERT"
    override def isAssert: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object CALL extends Role {
    val value = 84
    val index = 84
    val name = "CALL"
    override def isCall: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object CALLEE extends Role {
    val value = 85
    val index = 85
    val name = "CALLEE"
    override def isCallee: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object POSITIONAL extends Role {
    val value = 86
    val index = 86
    val name = "POSITIONAL"
    override def isPositional: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object NOOP extends Role {
    val value = 87
    val index = 87
    val name = "NOOP"
    override def isNoop: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object LITERAL extends Role {
    val value = 88
    val index = 88
    val name = "LITERAL"
    override def isLiteral: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object BYTE extends Role {
    val value = 89
    val index = 89
    val name = "BYTE"
    override def isByte: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object BYTE_STRING extends Role {
    val value = 90
    val index = 90
    val name = "BYTE_STRING"
    override def isByteString: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object CHARACTER extends Role {
    val value = 91
    val index = 91
    val name = "CHARACTER"
    override def isCharacter: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object LIST extends Role {
    val value = 92
    val index = 92
    val name = "LIST"
    override def isList: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object MAP extends Role {
    val value = 93
    val index = 93
    val name = "MAP"
    override def isMap: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object NULL extends Role {
    val value = 94
    val index = 94
    val name = "NULL"
    override def isNull: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object NUMBER extends Role {
    val value = 95
    val index = 95
    val name = "NUMBER"
    override def isNumber: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object REGEXP extends Role {
    val value = 96
    val index = 96
    val name = "REGEXP"
    override def isRegexp: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object SET extends Role {
    val value = 97
    val index = 97
    val name = "SET"
    override def isSet: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object STRING extends Role {
    val value = 98
    val index = 98
    val name = "STRING"
    override def isString: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object TUPLE extends Role {
    val value = 99
    val index = 99
    val name = "TUPLE"
    override def isTuple: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object TYPE extends Role {
    val value = 100
    val index = 100
    val name = "TYPE"
    override def isType: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object ENTRY extends Role {
    val value = 101
    val index = 101
    val name = "ENTRY"
    override def isEntry: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object KEY extends Role {
    val value = 102
    val index = 102
    val name = "KEY"
    override def isKey: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object PRIMITIVE extends Role {
    val value = 103
    val index = 103
    val name = "PRIMITIVE"
    override def isPrimitive: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object ASSIGNMENT extends Role {
    val value = 104
    val index = 104
    val name = "ASSIGNMENT"
    override def isAssignment: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object THIS extends Role {
    val value = 105
    val index = 105
    val name = "THIS"
    override def isThis: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object COMMENT extends Role {
    val value = 106
    val index = 106
    val name = "COMMENT"
    override def isComment: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object DOCUMENTATION extends Role {
    val value = 107
    val index = 107
    val name = "DOCUMENTATION"
    override def isDocumentation: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object WHITESPACE extends Role {
    val value = 108
    val index = 108
    val name = "WHITESPACE"
    override def isWhitespace: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object INCOMPLETE extends Role {
    val value = 109
    val index = 109
    val name = "INCOMPLETE"
    override def isIncomplete: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object UNANNOTATED extends Role {
    val value = 110
    val index = 110
    val name = "UNANNOTATED"
    override def isUnannotated: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object VISIBILITY extends Role {
    val value = 111
    val index = 111
    val name = "VISIBILITY"
    override def isVisibility: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object ANNOTATION extends Role {
    val value = 112
    val index = 112
    val name = "ANNOTATION"
    override def isAnnotation: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object ANONYMOUS extends Role {
    val value = 113
    val index = 113
    val name = "ANONYMOUS"
    override def isAnonymous: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object ENUMERATION extends Role {
    val value = 114
    val index = 114
    val name = "ENUMERATION"
    override def isEnumeration: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object ARITHMETIC extends Role {
    val value = 115
    val index = 115
    val name = "ARITHMETIC"
    override def isArithmetic: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object RELATIONAL extends Role {
    val value = 116
    val index = 116
    val name = "RELATIONAL"
    override def isRelational: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object VARIABLE extends Role {
    val value = 117
    val index = 117
    val name = "VARIABLE"
    override def isVariable: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  final case class Unrecognized(value: _root_.scala.Int) extends Role with _root_.scalapb.UnrecognizedEnum
  
  lazy val values = scala.collection.Seq(INVALID, IDENTIFIER, QUALIFIED, OPERATOR, BINARY, UNARY, LEFT, RIGHT, INFIX, POSTFIX, BITWISE, BOOLEAN, UNSIGNED, LEFT_SHIFT, RIGHT_SHIFT, OR, XOR, AND, EXPRESSION, STATEMENT, EQUAL, NOT, LESS_THAN, LESS_THAN_OR_EQUAL, GREATER_THAN, GREATER_THAN_OR_EQUAL, IDENTICAL, CONTAINS, INCREMENT, DECREMENT, NEGATIVE, POSITIVE, DEREFERENCE, TAKE_ADDRESS, FILE, ADD, SUBSTRACT, MULTIPLY, DIVIDE, MODULO, PACKAGE, DECLARATION, IMPORT, PATHNAME, ALIAS, FUNCTION, BODY, NAME, RECEIVER, ARGUMENT, VALUE, ARGS_LIST, BASE, IMPLEMENTS, INSTANCE, SUBTYPE, SUBPACKAGE, MODULE, FRIEND, WORLD, IF, CONDITION, THEN, ELSE, SWITCH, CASE, DEFAULT, FOR, INITIALIZATION, UPDATE, ITERATOR, WHILE, DO_WHILE, BREAK, CONTINUE, GOTO, BLOCK, SCOPE, RETURN, TRY, CATCH, FINALLY, THROW, ASSERT, CALL, CALLEE, POSITIONAL, NOOP, LITERAL, BYTE, BYTE_STRING, CHARACTER, LIST, MAP, NULL, NUMBER, REGEXP, SET, STRING, TUPLE, TYPE, ENTRY, KEY, PRIMITIVE, ASSIGNMENT, THIS, COMMENT, DOCUMENTATION, WHITESPACE, INCOMPLETE, UNANNOTATED, VISIBILITY, ANNOTATION, ANONYMOUS, ENUMERATION, ARITHMETIC, RELATIONAL, VARIABLE)
  def fromValue(value: _root_.scala.Int): Role = value match {
    case 0 => INVALID
    case 1 => IDENTIFIER
    case 2 => QUALIFIED
    case 3 => OPERATOR
    case 4 => BINARY
    case 5 => UNARY
    case 6 => LEFT
    case 7 => RIGHT
    case 8 => INFIX
    case 9 => POSTFIX
    case 10 => BITWISE
    case 11 => BOOLEAN
    case 12 => UNSIGNED
    case 13 => LEFT_SHIFT
    case 14 => RIGHT_SHIFT
    case 15 => OR
    case 16 => XOR
    case 17 => AND
    case 18 => EXPRESSION
    case 19 => STATEMENT
    case 20 => EQUAL
    case 21 => NOT
    case 22 => LESS_THAN
    case 23 => LESS_THAN_OR_EQUAL
    case 24 => GREATER_THAN
    case 25 => GREATER_THAN_OR_EQUAL
    case 26 => IDENTICAL
    case 27 => CONTAINS
    case 28 => INCREMENT
    case 29 => DECREMENT
    case 30 => NEGATIVE
    case 31 => POSITIVE
    case 32 => DEREFERENCE
    case 33 => TAKE_ADDRESS
    case 34 => FILE
    case 35 => ADD
    case 36 => SUBSTRACT
    case 37 => MULTIPLY
    case 38 => DIVIDE
    case 39 => MODULO
    case 40 => PACKAGE
    case 41 => DECLARATION
    case 42 => IMPORT
    case 43 => PATHNAME
    case 44 => ALIAS
    case 45 => FUNCTION
    case 46 => BODY
    case 47 => NAME
    case 48 => RECEIVER
    case 49 => ARGUMENT
    case 50 => VALUE
    case 51 => ARGS_LIST
    case 52 => BASE
    case 53 => IMPLEMENTS
    case 54 => INSTANCE
    case 55 => SUBTYPE
    case 56 => SUBPACKAGE
    case 57 => MODULE
    case 58 => FRIEND
    case 59 => WORLD
    case 60 => IF
    case 61 => CONDITION
    case 62 => THEN
    case 63 => ELSE
    case 64 => SWITCH
    case 65 => CASE
    case 66 => DEFAULT
    case 67 => FOR
    case 68 => INITIALIZATION
    case 69 => UPDATE
    case 70 => ITERATOR
    case 71 => WHILE
    case 72 => DO_WHILE
    case 73 => BREAK
    case 74 => CONTINUE
    case 75 => GOTO
    case 76 => BLOCK
    case 77 => SCOPE
    case 78 => RETURN
    case 79 => TRY
    case 80 => CATCH
    case 81 => FINALLY
    case 82 => THROW
    case 83 => ASSERT
    case 84 => CALL
    case 85 => CALLEE
    case 86 => POSITIONAL
    case 87 => NOOP
    case 88 => LITERAL
    case 89 => BYTE
    case 90 => BYTE_STRING
    case 91 => CHARACTER
    case 92 => LIST
    case 93 => MAP
    case 94 => NULL
    case 95 => NUMBER
    case 96 => REGEXP
    case 97 => SET
    case 98 => STRING
    case 99 => TUPLE
    case 100 => TYPE
    case 101 => ENTRY
    case 102 => KEY
    case 103 => PRIMITIVE
    case 104 => ASSIGNMENT
    case 105 => THIS
    case 106 => COMMENT
    case 107 => DOCUMENTATION
    case 108 => WHITESPACE
    case 109 => INCOMPLETE
    case 110 => UNANNOTATED
    case 111 => VISIBILITY
    case 112 => ANNOTATION
    case 113 => ANONYMOUS
    case 114 => ENUMERATION
    case 115 => ARITHMETIC
    case 116 => RELATIONAL
    case 117 => VARIABLE
    case __other => Unrecognized(__other)
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = GeneratedProto.javaDescriptor.getEnumTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = GeneratedProto.scalaDescriptor.enums(0)
}